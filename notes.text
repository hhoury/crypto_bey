





class Order(Base):
    __tablename__ = 'orders'

    id = Column(Integer, primary_key=True, index=True)
    user_id = Column(String, ForeignKey("users.id"), nullable=False)
    usda_amount = Column(Float, default=0)
    item_url = Column(String)
    address_id = Column(Integer, ForeignKey("addresses.id"), nullable=True)
    order_status = Column(Enum(OrderStatus), default=OrderStatus.awaiting_verification)
    cancel_reason = Column(String)
    tracking_url = Column(String, nullable=True)
    tracking_number = Column(Integer, nullable=True)
    note = Column(String, nullable=True)
    purchase_screenshot_url = Column(String, nullable=True)
    retailer = Column(String, nullable=True)

    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    address = relationship("Address", back_populates="orders")
    user = relationship("UserInfo", back_populates="orders")

    @hybrid_property
    def screenshot_download_url(self):
        return f"{DOWNLOAD_URL}{self.purchase_screenshot_url}"

    def __str__(self):
        return f"Order {self.id} from user {self.user_id}"




class OrderStats(Base):
    __tablename__ = "order_stats"

    user_id = Column(String, ForeignKey("users.id"), nullable=False, primary_key=True)
    total_orders = Column(Integer)
    last_order_id = Column(Integer, ForeignKey("orders.id"), nullable=True)
    delivered_orders_count = Column(Integer)
    canceled_orders_count = Column(Integer)
    awaiting_delivery_count = Column(Integer)
    awaiting_order_count = Column(Integer)
    awaiting_payment_count = Column(Integer)
    awaiting_verification_orders_count = Column(Integer)

    created_at = Column(DateTime(timezone=True), server_default=func.now())
    updated_at = Column(DateTime(timezone=True), onupdate=func.now())

    def __str__(self):
        return f"OrderStats of user {self.user_id}"


class CryptoWallet(Base):
    __tablename__ = "crypto_wallet"

    id_seq = Sequence('id_seq', metadata=Base.metadata)
    id = Column(Integer, primary_key=True, index=True, server_default=id_seq.next_value())
    user_id = Column(String, ForeignKey("users.id"), nullable=False, primary_key=True)
    name = Column(String)
    trc20 = Column(String)
    erc20 = Column(String)
    omni = Column(String)

    def __str__(self):
        return f"Crypto wallet {self.id} of user {self.user_id}"